{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	"console.log": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "log",
			"body": [
					"console.log(`$1`);$2",
			],
			"description": "Log output to console"
	},
	"destructure.props": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "dprops",
			"body": [
					"const {$1} = props;",
			],
			"description": "destructure.props"
	},
	"destructure.var": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "dvar",
			"body": [
					"const {$2} = ${1};",
			],
			"description": "destructure.var"
	},
	"arrow.function": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "aff",
			"body": [
					"($1) => {$2}$3",
			],
			"description": "Arrow function"
	},
	"playwright.goto": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "pw-goto",
			"body": [
					"await page.goto(`$1`);",
			],
			"description": "playwright.goto"
	},
	"playwright.select": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "pw-select",
			"body": [
					"const $1 = await page.$(`$2`);$3",
			],
			"description": "playwright.select"
	},
	"playwright.select-all": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "pw-select-all",
			"body": [
					"const $1 = await page.$$(`$2`);$3",
			],
			"description": "playwright.select-all"
	},
	"playwright.click": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "pw-select-click",
			"body": [
					"await page.click(`$1`);$3",
			],
			"description": "playwright.click"
	},
	"playwright.wait-domcontentloaded": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "pw-wait",
			"body": [
					"await page.waitForLoadState('domcontentloaded');",
			],
			"description": "playwright.domcontentloaded"
	},
	"playwright.wait-networkidle": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "pw-wait",
			"body": [
					"await page.waitForLoadState('networkidle');",
			],
			"description": "playwright.networkidle"
	},
	"playwright.getAttribute()": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "pw-get",
			"body": [
					"const ${1:var} = await ${2:el}.getAttribute(`$3`);$4",
			],
			"description": "playwright.getAttribute()"
	},
	"playwright.textContent()": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "pw-get",
			"body": [
					"const ${1:var} = await ${2:el}.textContent();$3",
			],
			"description": "playwright.TextContent"
	},
	"await": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "aw",
			"body": [
					"await $1",
			],
			"description": "await"
	},
	"logVar": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "logVar",
			"body": [
					"console.log('$1',$1)",
			],
			"description": "logVar"
	},
	"***********": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "***********",
			"body": [
					"console.log(`*********** $1 ***********`,$1)",
			],
			"description": "***********"
	},
	"###########": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "###########",
			"body": [
					"console.log(`############ $1 ############`,$1)",
			],
			"description": "###########"
	},
	"-------------": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "-------------",
			"body": [
					"console.log(`------------- $1 -------------`,$1)",
			],
			"description": "-------------"
	},
	"_____________": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "_____________",
			"body": [
					"console.log(`_____________ $1 _____________`,$1)",
			],
			"description": "_____________"
	},
	">>>>>>>>>>>>>>>": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": ">>>>>>>>>>>>>>>",
			"body": [
					"console.log(`<<<<<<<<<<<<<<< $1 >>>>>>>>>>>>>>>`,$1)",
			],
			"description": ">>>>>>>>>>>>>>>"
	},
	"rrfc": {
			"scope": "javascript,typescript,javascriptreact,typescriptreact",
			"prefix": "rrfc",
			"body": [
					"import React from 'react';",
					"import View from '@app/components/shared/View';",
					"",
					"interface I${1:Chip} {}",
					"const ${1:Chip}: React.FC<I${1:Chip}> = props => {",
							"const {} = props;",
							"return (",
									"<View>",
											"<View />",
									"</View>",
							");",
					"};",
					"",
					"export default ${1:Chip};",
			],
			"description": "React native component typescript"
	}
}
